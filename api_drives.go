
/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.8
 * Contact: admin@collegefootballdata.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type DrivesApiService service
/*
DrivesApiService Drive data and results
Get game drives
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param year Year filter
 * @param optional nil or *DrivesApiGetDrivesOpts - Optional Parameters:
     * @param "SeasonType" (optional.String) -  Season type filter
     * @param "Week" (optional.Int32) -  Week filter
     * @param "Team" (optional.String) -  Team filter
     * @param "Offense" (optional.String) -  Offensive team filter
     * @param "Defense" (optional.String) -  Defensive team filter
     * @param "Conference" (optional.String) -  Conference filter
     * @param "OffenseConference" (optional.String) -  Offensive conference filter
     * @param "DefenseConference" (optional.String) -  Defensive conference filter
     * @param "Classification" (optional.String) -  Division classification filter (fbs/fcs/ii/iii)
@return []Drive
*/

type DrivesApiGetDrivesOpts struct {
    SeasonType optional.String
    Week optional.Int32
    Team optional.String
    Offense optional.String
    Defense optional.String
    Conference optional.String
    OffenseConference optional.String
    DefenseConference optional.String
    Classification optional.String
}

func (a *DrivesApiService) GetDrives(ctx context.Context, year int32, localVarOptionals *DrivesApiGetDrivesOpts) ([]Drive, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []Drive
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/drives"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if year < 2001 {
		return localVarReturnValue, nil, reportError("year must be greater than 2001")
	}

	if localVarOptionals != nil && localVarOptionals.SeasonType.IsSet() {
		localVarQueryParams.Add("seasonType", parameterToString(localVarOptionals.SeasonType.Value(), ""))
	}
	localVarQueryParams.Add("year", parameterToString(year, ""))
	if localVarOptionals != nil && localVarOptionals.Week.IsSet() {
		localVarQueryParams.Add("week", parameterToString(localVarOptionals.Week.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Team.IsSet() {
		localVarQueryParams.Add("team", parameterToString(localVarOptionals.Team.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offense.IsSet() {
		localVarQueryParams.Add("offense", parameterToString(localVarOptionals.Offense.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Defense.IsSet() {
		localVarQueryParams.Add("defense", parameterToString(localVarOptionals.Defense.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Conference.IsSet() {
		localVarQueryParams.Add("conference", parameterToString(localVarOptionals.Conference.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OffenseConference.IsSet() {
		localVarQueryParams.Add("offenseConference", parameterToString(localVarOptionals.OffenseConference.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DefenseConference.IsSet() {
		localVarQueryParams.Add("defenseConference", parameterToString(localVarOptionals.DefenseConference.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Classification.IsSet() {
		localVarQueryParams.Add("classification", parameterToString(localVarOptionals.Classification.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []Drive
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
