
/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.8
 * Contact: admin@collegefootballdata.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type BettingApiService service
/*
BettingApiService Betting lines
Closing betting lines
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *BettingApiGetLinesOpts - Optional Parameters:
     * @param "GameId" (optional.Int32) -  Game id filter
     * @param "Year" (optional.Int32) -  Year/season filter for games
     * @param "Week" (optional.Int32) -  Week filter
     * @param "SeasonType" (optional.String) -  Season type filter (regular or postseason)
     * @param "Team" (optional.String) -  Team
     * @param "Home" (optional.String) -  Home team filter
     * @param "Away" (optional.String) -  Away team filter
     * @param "Conference" (optional.String) -  Conference abbreviation filter
@return []GameLines
*/

type BettingApiGetLinesOpts struct {
    GameId optional.Int32
    Year optional.Int32
    Week optional.Int32
    SeasonType optional.String
    Team optional.String
    Home optional.String
    Away optional.String
    Conference optional.String
}

func (a *BettingApiService) GetLines(ctx context.Context, localVarOptionals *BettingApiGetLinesOpts) ([]GameLines, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue []GameLines
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/lines"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.GameId.IsSet() {
		localVarQueryParams.Add("gameId", parameterToString(localVarOptionals.GameId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Year.IsSet() {
		localVarQueryParams.Add("year", parameterToString(localVarOptionals.Year.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Week.IsSet() {
		localVarQueryParams.Add("week", parameterToString(localVarOptionals.Week.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SeasonType.IsSet() {
		localVarQueryParams.Add("seasonType", parameterToString(localVarOptionals.SeasonType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Team.IsSet() {
		localVarQueryParams.Add("team", parameterToString(localVarOptionals.Team.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Home.IsSet() {
		localVarQueryParams.Add("home", parameterToString(localVarOptionals.Home.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Away.IsSet() {
		localVarQueryParams.Add("away", parameterToString(localVarOptionals.Away.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Conference.IsSet() {
		localVarQueryParams.Add("conference", parameterToString(localVarOptionals.Conference.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []GameLines
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
